package codepages

import (
	. "github.com/magicmonty/activesync-go/activesync/base"
	. "github.com/magicmonty/wbxml-go/wbxml"
	"testing"
)

func checkEmailCommonTags(t *testing.T, cp CodePage) {
	checkTagExists(t, TAG_EMAIL_DATERECEIVED, ID_EMAIL_DATERECEIVED, cp)
	checkTagExists(t, TAG_EMAIL_DISPLAYTO, ID_EMAIL_DISPLAYTO, cp)
	checkTagExists(t, TAG_EMAIL_IMPORTANCE, ID_EMAIL_IMPORTANCE, cp)
	checkTagExists(t, TAG_EMAIL_MESSAGECLASS, ID_EMAIL_MESSAGECLASS, cp)
	checkTagExists(t, TAG_EMAIL_SUBJECT, ID_EMAIL_SUBJECT, cp)
	checkTagExists(t, TAG_EMAIL_READ, ID_EMAIL_READ, cp)
	checkTagExists(t, TAG_EMAIL_TO, ID_EMAIL_TO, cp)
	checkTagExists(t, TAG_EMAIL_CC, ID_EMAIL_CC, cp)
	checkTagExists(t, TAG_EMAIL_FROM, ID_EMAIL_FROM, cp)
	checkTagExists(t, TAG_EMAIL_REPLYTO, ID_EMAIL_REPLYTO, cp)
	checkTagExists(t, TAG_EMAIL_ALLDAYEVENT, ID_EMAIL_ALLDAYEVENT, cp)
	checkTagExists(t, TAG_EMAIL_DTSTAMP, ID_EMAIL_DTSTAMP, cp)
	checkTagExists(t, TAG_EMAIL_ENDTIME, ID_EMAIL_ENDTIME, cp)
	checkTagExists(t, TAG_EMAIL_INSTANCETYPE, ID_EMAIL_INSTANCETYPE, cp)
	checkTagExists(t, TAG_EMAIL_BUSYSTATUS, ID_EMAIL_BUSYSTATUS, cp)
	checkTagExists(t, TAG_EMAIL_LOCATION, ID_EMAIL_LOCATION, cp)
	checkTagExists(t, TAG_EMAIL_MEETINGREQUEST, ID_EMAIL_MEETINGREQUEST, cp)
	checkTagExists(t, TAG_EMAIL_ORGANIZER, ID_EMAIL_ORGANIZER, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCEID, ID_EMAIL_RECURRENCEID, cp)
	checkTagExists(t, TAG_EMAIL_REMINDER, ID_EMAIL_REMINDER, cp)
	checkTagExists(t, TAG_EMAIL_RESPONSEREQUESTED, ID_EMAIL_RESPONSEREQUESTED, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCES, ID_EMAIL_RECURRENCES, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE, ID_EMAIL_RECURRENCE, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_TYPE, ID_EMAIL_RECURRENCE_TYPE, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_UNTIL, ID_EMAIL_RECURRENCE_UNTIL, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_OCCURRENCES, ID_EMAIL_RECURRENCE_OCCURRENCES, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_INTERVAL, ID_EMAIL_RECURRENCE_INTERVAL, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_DAYOFWEEK, ID_EMAIL_RECURRENCE_DAYOFWEEK, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_DAYOFMONTH, ID_EMAIL_RECURRENCE_DAYOFMONTH, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_WEEKOFMONTH, ID_EMAIL_RECURRENCE_WEEKOFMONTH, cp)
	checkTagExists(t, TAG_EMAIL_RECURRENCE_MONTHOFYEAR, ID_EMAIL_RECURRENCE_MONTHOFYEAR, cp)
	checkTagExists(t, TAG_EMAIL_STARTTIME, ID_EMAIL_STARTTIME, cp)
	checkTagExists(t, TAG_EMAIL_SENSITIVITY, ID_EMAIL_SENSITIVITY, cp)
	checkTagExists(t, TAG_EMAIL_TIMEZONE, ID_EMAIL_TIMEZONE, cp)
	checkTagExists(t, TAG_EMAIL_GLOBALOBJID, ID_EMAIL_GLOBALOBJID, cp)
	checkTagExists(t, TAG_EMAIL_THREADTOPIC, ID_EMAIL_THREADTOPIC, cp)
	checkTagExists(t, TAG_EMAIL_INTERNETCPID, ID_EMAIL_INTERNETCPID, cp)
	checkTagExists(t, TAG_EMAIL_FLAG, ID_EMAIL_FLAG, cp)
	checkTagExists(t, TAG_EMAIL_STATUS, ID_EMAIL_STATUS, cp)
	checkTagExists(t, TAG_EMAIL_CONTENTCLASS, ID_EMAIL_CONTENTCLASS, cp)
	checkTagExists(t, TAG_EMAIL_FLAGTYPE, ID_EMAIL_FLAGTYPE, cp)
	checkTagExists(t, TAG_EMAIL_COMPLETETIME, ID_EMAIL_COMPLETETIME, cp)
}

func Test_Email_120(t *testing.T) {
	cp := Email(PROTOCOL_VERSION_12_0)
	checkEmailCommonTags(t, cp)
	checkTagCount(t, 42, cp)
	checkTagNotExists(t, TAG_EMAIL_CATEGORIES, ID_EMAIL_CATEGORIES, cp)
	checkTagNotExists(t, TAG_EMAIL_CATEGORY, ID_EMAIL_CATEGORY, cp)
	checkTagNotExists(t, TAG_EMAIL_DISALLOWNEWTIMEPROPOSAL, ID_EMAIL_DISALLOWNEWTIMEPROPOSAL, cp)
}

func Test_Email_121(t *testing.T) {
	cp := Email(PROTOCOL_VERSION_12_1)
	checkEmailCommonTags(t, cp)
	checkTagCount(t, 42, cp)
	checkTagNotExists(t, TAG_EMAIL_CATEGORIES, ID_EMAIL_CATEGORIES, cp)
	checkTagNotExists(t, TAG_EMAIL_CATEGORY, ID_EMAIL_CATEGORY, cp)
	checkTagNotExists(t, TAG_EMAIL_DISALLOWNEWTIMEPROPOSAL, ID_EMAIL_DISALLOWNEWTIMEPROPOSAL, cp)
}

func Test_Email_140(t *testing.T) {
	cp := Email(PROTOCOL_VERSION_14_0)
	checkEmailCommonTags(t, cp)
	checkTagCount(t, 45, cp)
	checkTagExists(t, TAG_EMAIL_CATEGORIES, ID_EMAIL_CATEGORIES, cp)
	checkTagExists(t, TAG_EMAIL_CATEGORY, ID_EMAIL_CATEGORY, cp)
	checkTagExists(t, TAG_EMAIL_DISALLOWNEWTIMEPROPOSAL, ID_EMAIL_DISALLOWNEWTIMEPROPOSAL, cp)
}

func Test_Email_141(t *testing.T) {
	cp := Email(PROTOCOL_VERSION_14_1)
	checkEmailCommonTags(t, cp)
	checkTagCount(t, 45, cp)
	checkTagExists(t, TAG_EMAIL_CATEGORIES, ID_EMAIL_CATEGORIES, cp)
	checkTagExists(t, TAG_EMAIL_CATEGORY, ID_EMAIL_CATEGORY, cp)
	checkTagExists(t, TAG_EMAIL_DISALLOWNEWTIMEPROPOSAL, ID_EMAIL_DISALLOWNEWTIMEPROPOSAL, cp)
}
