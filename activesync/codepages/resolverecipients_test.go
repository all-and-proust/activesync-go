package codepages

import (
	. "github.com/magicmonty/activesync-go/activesync/base"
	. "github.com/magicmonty/wbxml-go/wbxml"
	"testing"
)

func checkResolveRecipientsCommonTags(t *testing.T, cp CodePage) {
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_RESOLVERECIPIENTS, ID_RESOLVE_RECIPIENTS_RESOLVERECIPIENTS, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_RESPONSE, ID_RESOLVE_RECIPIENTS_RESPONSE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_STATUS, ID_RESOLVE_RECIPIENTS_STATUS, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_TYPE, ID_RESOLVE_RECIPIENTS_TYPE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_RECIPIENT, ID_RESOLVE_RECIPIENTS_RECIPIENT, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_DISPLAYNAME, ID_RESOLVE_RECIPIENTS_DISPLAYNAME, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_EMAILADDRESS, ID_RESOLVE_RECIPIENTS_EMAILADDRESS, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_CERTIFICATES, ID_RESOLVE_RECIPIENTS_CERTIFICATES, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_CERTIFICATE, ID_RESOLVE_RECIPIENTS_CERTIFICATE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MINICERTIFICATE, ID_RESOLVE_RECIPIENTS_MINICERTIFICATE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_OPTIONS, ID_RESOLVE_RECIPIENTS_OPTIONS, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_TO, ID_RESOLVE_RECIPIENTS_TO, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_CERTIFICATERETRIEVAL, ID_RESOLVE_RECIPIENTS_CERTIFICATERETRIEVAL, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_RECIPIENTCOUNT, ID_RESOLVE_RECIPIENTS_RECIPIENTCOUNT, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MAXCERTIFICATES, ID_RESOLVE_RECIPIENTS_MAXCERTIFICATES, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MAXAMBIGUOUSRECIPIENTS, ID_RESOLVE_RECIPIENTS_MAXAMBIGUOUSRECIPIENTS, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_CERTIFICATECOUNT, ID_RESOLVE_RECIPIENTS_CERTIFICATECOUNT, cp)
}

func Test_ResolveRecipients_120(t *testing.T) {
	cp := ResolveRecipients(PROTOCOL_VERSION_12_0)
	checkResolveRecipientsCommonTags(t, cp)
	checkTagCount(t, 17, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_AVAILABILITY, ID_RESOLVE_RECIPIENTS_AVAILABILITY, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_STARTTIME, ID_RESOLVE_RECIPIENTS_STARTTIME, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_ENDTIME, ID_RESOLVE_RECIPIENTS_ENDTIME, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, ID_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_PICTURE, ID_RESOLVE_RECIPIENTS_PICTURE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXSIZE, ID_RESOLVE_RECIPIENTS_MAXSIZE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_DATA, ID_RESOLVE_RECIPIENTS_DATA, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXPICTURES, ID_RESOLVE_RECIPIENTS_MAXPICTURES, cp)
}

func Test_ResolveRecipients_121(t *testing.T) {
	cp := ResolveRecipients(PROTOCOL_VERSION_12_1)
	checkResolveRecipientsCommonTags(t, cp)
	checkTagCount(t, 17, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_AVAILABILITY, ID_RESOLVE_RECIPIENTS_AVAILABILITY, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_STARTTIME, ID_RESOLVE_RECIPIENTS_STARTTIME, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_ENDTIME, ID_RESOLVE_RECIPIENTS_ENDTIME, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, ID_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_PICTURE, ID_RESOLVE_RECIPIENTS_PICTURE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXSIZE, ID_RESOLVE_RECIPIENTS_MAXSIZE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_DATA, ID_RESOLVE_RECIPIENTS_DATA, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXPICTURES, ID_RESOLVE_RECIPIENTS_MAXPICTURES, cp)
}

func Test_ResolveRecipients_140(t *testing.T) {
	cp := ResolveRecipients(PROTOCOL_VERSION_14_0)
	checkResolveRecipientsCommonTags(t, cp)
	checkTagCount(t, 21, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_AVAILABILITY, ID_RESOLVE_RECIPIENTS_AVAILABILITY, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_STARTTIME, ID_RESOLVE_RECIPIENTS_STARTTIME, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_ENDTIME, ID_RESOLVE_RECIPIENTS_ENDTIME, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, ID_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_PICTURE, ID_RESOLVE_RECIPIENTS_PICTURE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXSIZE, ID_RESOLVE_RECIPIENTS_MAXSIZE, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_DATA, ID_RESOLVE_RECIPIENTS_DATA, cp)
	checkTagNotExists(t, TAG_RESOLVE_RECIPIENTS_MAXPICTURES, ID_RESOLVE_RECIPIENTS_MAXPICTURES, cp)
}

func Test_ResolveRecipients_141(t *testing.T) {
	cp := ResolveRecipients(PROTOCOL_VERSION_14_1)
	checkResolveRecipientsCommonTags(t, cp)
	checkTagCount(t, 25, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_AVAILABILITY, ID_RESOLVE_RECIPIENTS_AVAILABILITY, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_STARTTIME, ID_RESOLVE_RECIPIENTS_STARTTIME, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_ENDTIME, ID_RESOLVE_RECIPIENTS_ENDTIME, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, ID_RESOLVE_RECIPIENTS_MERGEDFREEBUSY, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_PICTURE, ID_RESOLVE_RECIPIENTS_PICTURE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MAXSIZE, ID_RESOLVE_RECIPIENTS_MAXSIZE, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_DATA, ID_RESOLVE_RECIPIENTS_DATA, cp)
	checkTagExists(t, TAG_RESOLVE_RECIPIENTS_MAXPICTURES, ID_RESOLVE_RECIPIENTS_MAXPICTURES, cp)
}
