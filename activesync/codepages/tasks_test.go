package codepages

import (
	. "github.com/magicmonty/activesync-go/activesync/base"
	. "github.com/magicmonty/wbxml-go/wbxml"
	"testing"
)

func checkTasksCommonTags(t *testing.T, cp CodePage) {
	checkTagExists(t, TAG_TASKS_CATEGORIES, ID_TASKS_CATEGORIES, cp)
	checkTagExists(t, TAG_TASKS_CATEGORY, ID_TASKS_CATEGORY, cp)
	checkTagExists(t, TAG_TASKS_COMPLETE, ID_TASKS_COMPLETE, cp)
	checkTagExists(t, TAG_TASKS_DATECOMPLETED, ID_TASKS_DATECOMPLETED, cp)
	checkTagExists(t, TAG_TASKS_DUEDATE, ID_TASKS_DUEDATE, cp)
	checkTagExists(t, TAG_TASKS_UTCDUEDATE, ID_TASKS_UTCDUEDATE, cp)
	checkTagExists(t, TAG_TASKS_IMPORTANCE, ID_TASKS_IMPORTANCE, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE, ID_TASKS_RECURRENCE, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_TYPE, ID_TASKS_RECURRENCE_TYPE, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_START, ID_TASKS_RECURRENCE_START, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_UNTIL, ID_TASKS_RECURRENCE_UNTIL, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_OCCURRENCES, ID_TASKS_RECURRENCE_OCCURRENCES, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_INTERVAL, ID_TASKS_RECURRENCE_INTERVAL, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_DAYOFMONTH, ID_TASKS_RECURRENCE_DAYOFMONTH, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_DAYOFWEEK, ID_TASKS_RECURRENCE_DAYOFWEEK, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_WEEKOFMONTH, ID_TASKS_RECURRENCE_WEEKOFMONTH, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_MONTHOFYEAR, ID_TASKS_RECURRENCE_MONTHOFYEAR, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_REGENERATE, ID_TASKS_RECURRENCE_REGENERATE, cp)
	checkTagExists(t, TAG_TASKS_RECURRENCE_DEADOCCUR, ID_TASKS_RECURRENCE_DEADOCCUR, cp)
	checkTagExists(t, TAG_TASKS_REMINDERSET, ID_TASKS_REMINDERSET, cp)
	checkTagExists(t, TAG_TASKS_REMINDERTIME, ID_TASKS_REMINDERTIME, cp)
	checkTagExists(t, TAG_TASKS_SENSITIVITY, ID_TASKS_SENSITIVITY, cp)
	checkTagExists(t, TAG_TASKS_STARTDATE, ID_TASKS_STARTDATE, cp)
	checkTagExists(t, TAG_TASKS_UTCSTARTDATE, ID_TASKS_UTCSTARTDATE, cp)
	checkTagExists(t, TAG_TASKS_SUBJECT, ID_TASKS_SUBJECT, cp)
	checkTagExists(t, TAG_TASKS_ORDINALDATE, ID_TASKS_ORDINALDATE, cp)
	checkTagExists(t, TAG_TASKS_SUBORDINALDATE, ID_TASKS_SUBORDINALDATE, cp)
}

func Test_Tasks_120(t *testing.T) {
	cp := Tasks(PROTOCOL_VERSION_12_0)
	checkTasksCommonTags(t, cp)
	checkTagCount(t, 27, cp)
	checkTagNotExists(t, TAG_TASKS_CALENDARTYPE, ID_TASKS_CALENDARTYPE, cp)
	checkTagNotExists(t, TAG_TASKS_ISLEAPMONTH, ID_TASKS_ISLEAPMONTH, cp)
	checkTagNotExists(t, TAG_TASKS_FIRSTDAYOFWEEK, ID_TASKS_FIRSTDAYOFWEEK, cp)
}

func Test_Tasks_121(t *testing.T) {
	cp := Tasks(PROTOCOL_VERSION_12_1)
	checkTasksCommonTags(t, cp)
	checkTagCount(t, 27, cp)
	checkTagNotExists(t, TAG_TASKS_CALENDARTYPE, ID_TASKS_CALENDARTYPE, cp)
	checkTagNotExists(t, TAG_TASKS_ISLEAPMONTH, ID_TASKS_ISLEAPMONTH, cp)
	checkTagNotExists(t, TAG_TASKS_FIRSTDAYOFWEEK, ID_TASKS_FIRSTDAYOFWEEK, cp)
}

func Test_Tasks_140(t *testing.T) {
	cp := Tasks(PROTOCOL_VERSION_14_0)
	checkTasksCommonTags(t, cp)
	checkTagCount(t, 29, cp)
	checkTagExists(t, TAG_TASKS_CALENDARTYPE, ID_TASKS_CALENDARTYPE, cp)
	checkTagExists(t, TAG_TASKS_ISLEAPMONTH, ID_TASKS_ISLEAPMONTH, cp)
	checkTagNotExists(t, TAG_TASKS_FIRSTDAYOFWEEK, ID_TASKS_FIRSTDAYOFWEEK, cp)
}

func Test_Tasks_141(t *testing.T) {
	cp := Tasks(PROTOCOL_VERSION_14_1)
	checkTasksCommonTags(t, cp)
	checkTagCount(t, 30, cp)
	checkTagExists(t, TAG_TASKS_CALENDARTYPE, ID_TASKS_CALENDARTYPE, cp)
	checkTagExists(t, TAG_TASKS_ISLEAPMONTH, ID_TASKS_ISLEAPMONTH, cp)
	checkTagExists(t, TAG_TASKS_FIRSTDAYOFWEEK, ID_TASKS_FIRSTDAYOFWEEK, cp)
}
